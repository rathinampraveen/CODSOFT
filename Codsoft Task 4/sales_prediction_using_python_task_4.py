# -*- coding: utf-8 -*-
"""Sales prediction using Python - Task 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SajG62DvyjzKPGRVxAgEa3QicBKnowF-

#**Sales Price Prediction**#

Sales prediction involves forecasting the amount of a product that
customers will purchase, taking into account various factors such as
advertising expenditure, target audience segmentation, and
advertising platform selection.

##Importing the necessary packages##
"""

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings("ignore")

"""# Reading Data"""

df= pd.read_csv('/content/car_purchasing.csv', encoding= 'latin1')

df.head()

df.columns

df.shape

df.info()

"""# Exploratory Data Analysis"""

import matplotlib.pyplot as plt
import seaborn as sns
sns.pairplot(df)

sns.heatmap(df.corr(), annot= True)

fig,axes = plt.subplots(2,2,figsize=(15,10))
cols =[ 'credit card debt','age', 'annual Salary', 'net worth']
for i in range(4):
    sns.scatterplot(x='car purchase amount', y=cols[i], data=df, ax=axes[i%2,i//2], hue='gender' )

fig,axes = plt.subplots(2,2,figsize=(13,10))
cols =[ 'credit card debt','age', 'annual Salary', 'net worth']
for i in range(4):
    sns.histplot(kde= True, x='car purchase amount', y=cols[i], data=df, ax=axes[i%2,i//2], hue='gender' )

"""# Data Cleaning and Preprocessing"""

df.isnull().sum()

"""Since there is no missing value, there is no need to do major preprocessing.

## Splitting Data into X and Y
"""

x= df[['gender', 'age', 'annual Salary', 'credit card debt', 'net worth']]
y= df[['car purchase amount']]

x.head()

y.head()

"""## Importing ML Libraries"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score

x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.2, random_state=42)

print('x_train shape is :', x_train.shape)
print('x_test shape is :', x_test.shape)
print('y_train shape is :', y_train.shape)
print('y_test shape is :', y_test.shape)

y_train

"""**Using StandardScaler Library to scale the Data**"""

sc= StandardScaler()
sc.fit_transform(x_train, y_train)

lr= LinearRegression()
lr.fit(x_train,y_train)
y_pred_lr = lr.predict(x_test)
R2_lr= r2_score(y_true=y_test,y_pred=y_pred_lr)
print(f"Model Accuracy: {R2_lr}")

sc = StandardScaler()
x_train_scaled = sc.fit_transform(x_train)
x_test_scaled = sc.transform(x_test)

lr = LinearRegression()
lr.fit(x_train_scaled, y_train)

gender = int(input("Enter gender (1 for male, 0 for female): "))
age = int(input("Enter age: "))
annual_salary = float(input("Enter annual salary: "))
credit_card_debt = float(input("Enter credit card debt: "))
net_worth = float(input("Enter net worth: "))


new_data = np.array([[gender, age, annual_salary, credit_card_debt, net_worth]])
new_data_scaled = sc.transform(new_data)
car_price_prediction = lr.predict(new_data_scaled)
print(f"Predicted Car Purchase Amount: {car_price_prediction[0][0]}")