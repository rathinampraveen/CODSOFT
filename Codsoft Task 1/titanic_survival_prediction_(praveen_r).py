# -*- coding: utf-8 -*-
"""TITANIC SURVIVAL PREDICTION (PRAVEEN.R)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AjqXVAWYSYt3TAnMpGpYGgEUMG0TKHw5
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

tc = pd.read_csv('/content/tested.csv')

tc

tc.columns

tc.head()

tc.describe()

sns.pairplot(tc)

sns.distplot(tc['Survived'])

sns.histplot(tc['Survived'])

x=tc[['PassengerId', 'Name', 'Sex', 'Ticket','Embarked',]]
y=tc[['Survived']]

x

sns.countplot(x='Survived',hue='Sex',data=tc)

sns.boxplot(x='Pclass',y='Age',data=tc)

sns.heatmap(tc.isnull())

sns.set_style('whitegrid')
sns.countplot(x='Survived',data=tc,palette='RdBu_r')

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Sex',data=tc,palette='RdBu_r')

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Pclass',data=tc,palette='rainbow')

sns.distplot(tc['Age'].dropna(),kde=False,color='darkred',bins=30)

tc['Age'].hist(bins=30,color='darkred',alpha=0.7)

sns.countplot(x='SibSp',data=tc)

tc['Fare'].hist(color='green',bins=40,figsize=(8,4))

def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]

    if pd.isnull(Age):

        if Pclass == 1:
            return 37

        elif Pclass == 2:
            return 29

        else:
            return 24

    else:
        return Age

tc['Age'] = tc[['Age','Pclass']].apply(impute_age,axis=1)

sns.heatmap(tc.isnull(),yticklabels=False,cbar=False,cmap='viridis')

tc.drop('Cabin',axis=1,inplace=True)

tc.head()

tc.dropna(inplace=True)

tc.info()

sex = pd.get_dummies(tc['Sex'],drop_first=True)
embark = pd.get_dummies(tc['Embarked'],drop_first=True)

tc.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)

tc = pd.concat([tc,sex,embark],axis=1)

tc.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(tc.drop('Survived',axis=1),
                                                    tc['Survived'], test_size=0.30,
                                                    random_state=101)

from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)

predictions = logmodel.predict(X_test)

from sklearn.metrics import classification_report

print(classification_report(y_test,predictions))